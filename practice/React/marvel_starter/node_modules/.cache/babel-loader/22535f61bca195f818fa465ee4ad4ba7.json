{"ast":null,"code":"var _jsxFileName = \"/home/shura/for test/React-course-Udemy/Course-from-Udemy-JS-React/practice/React/marvel_starter/src/components/charList/CharList.js\";\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../../services/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CharList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      charList: [],\n      loading: true,\n      error: false,\n      newItemLoading: false,\n      offset: 1541,\n      charEnded: false\n    };\n    this.marvelService = new MarvelService();\n\n    this.onRequest = offset => {\n      this.onCharListLoading();\n      this.marvelService.getAllCharacters(offset).then(this.onCharListLoaded).catch(this.onError);\n    };\n\n    this.onCharListLoading = () => {\n      this.setState({\n        newItemLoading: true\n      });\n    };\n\n    this.onCharListLoaded = newCharList => {\n      let ended = false;\n\n      if (newCharList.length < 9) {\n        ended = true;\n      }\n\n      this.setState(({\n        offset,\n        charList\n      }) => ({\n        charList: [...charList, ...newCharList],\n        loading: false,\n        newItemLoading: false,\n        offset: offset + 9,\n        charEnded: ended\n      }));\n    };\n\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.onRequest();\n  }\n\n  renderItems(arr) {\n    const imgNotFound = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    const items = arr.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"char__item\",\n        onClick: () => {\n          this.props.onCharSelected(item.id);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: item.thumbnail,\n          alt: item.name,\n          style: item.thumbnail === imgNotFound ? {\n            objectFit: \"contain\"\n          } : {\n            objectFit: \"cover\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    }); // А эта конструкция вынесена для центровки спиннера/ошибки\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const {\n      charList,\n      loading,\n      error,\n      offset,\n      newItemLoading,\n      charEnded\n    } = this.state;\n    const items = this.renderItems(charList);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 35\n    }, this) : null;\n    const content = !(loading || error) ? items : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [errorMessage, spinner, content, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main button__long\",\n        disabled: newItemLoading,\n        style: {\n          'display': charEnded ? 'none' : 'block'\n        },\n        onClick: () => this.onRequest(offset),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.number\n};\nexport default CharList;","map":{"version":3,"sources":["/home/shura/for test/React-course-Udemy/Course-from-Udemy-JS-React/practice/React/marvel_starter/src/components/charList/CharList.js"],"names":["Component","PropTypes","Spinner","ErrorMessage","MarvelService","CharList","state","charList","loading","error","newItemLoading","offset","charEnded","marvelService","onRequest","onCharListLoading","getAllCharacters","then","onCharListLoaded","catch","onError","setState","newCharList","ended","length","componentDidMount","renderItems","arr","imgNotFound","items","map","item","props","onCharSelected","id","thumbnail","name","objectFit","render","errorMessage","spinner","content","propTypes","number"],"mappings":"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","sourcesContent":["import {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../../services/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\nclass CharList extends Component {\n\n    state = {\n        charList: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 1541,\n        charEnded: false\n    }\n\n    marvelService = new MarvelService();\n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading()\n        this.marvelService.getAllCharacters(offset)\n        .then(this.onCharListLoaded)\n        .catch(this.onError)\n    }\n    \n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    } \n\n    onCharListLoaded = (newCharList) => {\n        let ended = false;\n\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        this.setState(({offset, charList}) => ({\n                charList: [...charList, ...newCharList],\n                loading: false,\n                newItemLoading: false,\n                offset: offset + 9,\n                charEnded: ended\n        }))\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n\n    renderItems(arr) {\n        const imgNotFound = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n        const items = arr.map((item) => {\n            return (\n                <li \n                    className=\"char__item\" \n                    key={item.id}\n                    onClick={() => {this.props.onCharSelected(item.id)}}>\n                    <img \n                        src={item.thumbnail} \n                        alt={item.name} \n                        style={item.thumbnail === imgNotFound ? {objectFit: \"contain\"} : {objectFit: \"cover\"}}/>\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n    render() {\n        \n        const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n\n        const items = this.renderItems(charList);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? items : null;\n\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button \n                    className=\"button button__main button__long\"\n                    disabled={newItemLoading}\n                    style={{'display' : charEnded ? 'none' : 'block'}}\n                    onClick={() => this.onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.number\n}\n\nexport default CharList;"]},"metadata":{},"sourceType":"module"}